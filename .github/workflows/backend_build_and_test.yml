name: Backend Build and Test

on:
  workflow_dispatch:
  push:
    paths:
      - 'backend/**'

jobs:
#   Build-and-Test:
#     runs-on: ubuntu-latest
#     services:
#       # label used to access the service container
#       postgres:
#         # Docker Hub image
#         image: postgres:latest
#         # service environment variables
#         # `POSTGRES_HOST` is `postgres`
#         env:
#           # optional (defaults to `postgres`)
#           POSTGRES_DB: peopledb
#           # required
#           POSTGRES_PASSWORD: postgresPasswort
#           # optional (defaults to `5432`)
#           POSTGRES_PORT: 5432
#           # optional (defaults to `postgres`)
#           POSTGRES_USER: postgresUser
#         ports:
#           # maps tcp port 5432 on service container to the host
#           - 6432:5432
#         # set health checks to wait until postgres has started
#         options: >-
#           --health-cmd pg_isready
#           --health-interval 10s
#           --health-timeout 5s
#           --health-retries 5

#     steps:
#       - name: Checkout
#         uses: actions/checkout@v3
      
#       - name: Setup node
#         uses: actions/setup-node@v3
#         with:
#           node-version: 18.13.0
          
#       - name: Cache dependencies
#         id: cache
#         uses: actions/cache@v2
#         with:
#           path: ./backend/node_modules
#           key: modules-${{ hashFiles('./backend/package-lock.json') }}

#       - name: Build
#         if: steps.cache.outputs.cache-hit != 'true'
#         working-directory: ./backend
#         run: |
#           npm i
      
#       - name: Code Linting
#         working-directory: ./backend
#         run: |
#           npm run lint
      
#       - name: Unit and Integration Tests
#         working-directory: ./backend
#         id: tests
#         run: |
#           sed -i 's/<PGUSER>/postgresUser/' flyway/flyway.conf
#           sed -i 's/<PGPASSWORD>/postgresPasswort/' flyway/flyway.conf
#           sed -i 's/<PGDATABASE>/peopledb/' flyway/flyway.conf
#           sed -i 's/<PGPORT>/6432/' flyway/flyway.conf
#           sed -i 's/<PGHOST>/localhost/' flyway/flyway.conf
          
#           sed -i 's/<PIPELINE_PGUSER>/postgresUser/' package.json
#           sed -i 's/<PIPELINE_PGHOST>/localhost/' package.json
#           sed -i 's/<PIPELINE_PGPASSWORD>/postgresPasswort/' package.json
#           sed -i 's/<PIPELINE_PGDATABSE>/peopledb/' package.json
#           sed -i 's/<PIPELINE_PGPORT>/6432/' package.json
#           npm run migrate
#           npm run test-in-pipeline
          
#       - name: 'Upload Artifact'
#         uses: actions/upload-artifact@v3
#         with:
#           name: tests-coverage
#           path: ./backend/coverage/lcov.info
#           retention-days: 1
          
#   SonarCloud-Analysis:
#       runs-on: ubuntu-latest
#       needs: [Build-and-Test]
#       steps:
#         - name: Checkout
#           uses: actions/checkout@v3

#         - name: Download test coverage artifact
#           uses: actions/download-artifact@v3
#           with:
#             name: tests-coverage
            
#         - name: Check
#           run: |
#             ls
#             cat lcov.info
#             ls

#         - name: Analyze with SonarCloud
#           uses: sonarsource/sonarcloud-github-action@master
#           with:
#             args: >
#               -Dsonar.organization=amazingitorg
#               -Dsonar.projectKey=amazing-people-backend
#               -Dsonar.qualitygate.wait=true
#               -Dsonar.javascript.lcov.reportPaths=lcov.info
#               -Dsonar.sources=./backend/src/main
#               -Dsonar.tests=./backend/src/test/
#               -Dsonar.verbose=true

#           env:
#             GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#             SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  
  Build-and-push-docker-image:
#     needs: [Build-and-Test, SonarCloud-Analysis, Snyk]
    name: Build and push Docker image
    runs-on: ubuntu-latest
    outputs:
      imagetag: ${{ steps.dockertag.outputs.tag }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ secrets.DOCKER_NAMESPACE }}/${{ secrets.DOCKER_REPOSITORY }}
          tags: |
            type=sha,format=long
      
      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: ./backend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      
      - name: Set docker image tag output
        id: dockertag
        run: |
          DOCKER_IMAGE_TAG=`echo ${{ steps.meta.outputs.tags }} | cut -d ":" -f2`
          echo $DOCKER_IMAGE_TAG
          echo "tag=$DOCKER_IMAGE_TAG" >> $GITHUB_OUTPUT
          
  Update-Version:
    needs: [Build-and-push-docker-image]
    name: Update image version to trigger deployment
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
        
      - name: Update Version
        run: |
          echo ${{needs.Build-and-push-docker-image.outputs.imagetag}}
          version=$(cat ./helm/values.yaml | grep tag: | awk '{print $2}')
          echo $version
          DOCKER_IMAGE_TAG=${{needs.Build-and-push-docker-image.outputs.imagetag}}
          echo $DOCKER_IMAGE_TAG
          sed -i "s/$version/$DOCKER_IMAGE_TAG/" ./helm/values.yaml
          cat ./helm/values.yaml
  
#       - name: Commit & Push new image version
#         uses: actions-js/push@v1.3
#         with:
#           github_token: ${{ secrets.GITHUB_TOKEN }}
#           message: 'Version updated'
#           branch:  ${{ github.ref_name }}
#           repository: 'AmazingITorg/amazingness-service'
#       - name: Run Trivy vulnerability scanner
#         uses: aquasecurity/trivy-action@master
#         with:
#           image-ref: "${{ secrets.DOCKER_NAMESPACE }}/${{ secrets.DOCKER_REPOSITORY }}:dev"
#           format: "table"
#           exit-code: "1"
#           ignore-unfixed: true
#           vuln-type: "os,library"
#           severity: "CRITICAL"

  
#   Snyk:
#     uses: ./.github/workflows/snyk_check.yml
#     secrets:
#       snyk_token: ${{ secrets.SNYK_TOKEN }}
