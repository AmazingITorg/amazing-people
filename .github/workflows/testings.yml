name: Testings

on:
  workflow_dispatch:
  
env:
  CYPRESS_CACHE_FOLDER: cypress/cache

jobs:
  Testingz:
    runs-on: ubuntu-latest
    services:
      # label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres:latest
        # service environment variables
        # `POSTGRES_HOST` is `postgres`
        env:
          # optional (defaults to `postgres`)
          POSTGRES_DB: peopledb
          # required
          POSTGRES_PASSWORD: postgresPasswort
          # optional (defaults to `5432`)
          POSTGRES_PORT: 5432
          # optional (defaults to `postgres`)
          POSTGRES_USER: postgresUser
        ports:
          # maps tcp port 5432 on service container to the host
          - 6432:5432
        # set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 18.13.0
          
      - name: Cache dependencies
        id: cache
        uses: actions/cache@v2
        with:
          path: ./backend/node_modules
          key: modules-${{ hashFiles('./backend/package-lock.json') }}

      - name: Build Backend
        if: steps.cache.outputs.cache-hit != 'true'
        working-directory: ./backend
        run: |
          npm i
          
#       - name: Cache node_modules
#         id: cache-clt
#         uses: actions/cache@v2
#         with:
#           path: ./frontend/node_modules
#           key: clt-modules-${{ hashFiles('./frontend/package-lock.json') }}
          
      - name: Build Frontend
        if: steps.cache-clt.outputs.cache-hit != 'true'
        working-directory: ./frontend
        run: npm install
     
      - name: Run Backend
        working-directory: ./backend
        run: |
          sed -i 's/<PGUSER>/postgresUser/' flyway/flyway.conf
          sed -i 's/<PGPASSWORD>/postgresPasswort/' flyway/flyway.conf
          sed -i 's/<PGDATABASE>/peopledb/' flyway/flyway.conf
          sed -i 's/<PGPORT>/6432/' flyway/flyway.conf
          sed -i 's/<PGHOST>/localhost/' flyway/flyway.conf
          
          npm run migrate
          npm run start-dev &
     
      - name: Run E2E Tests Mocked
        working-directory: ./frontend
        run: npm run e2e-mocked

  Testingz2:
    runs-on: ubuntu-latest
    services:
      # label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres:latest
        # service environment variables
        # `POSTGRES_HOST` is `postgres`
        env:
          # optional (defaults to `postgres`)
          POSTGRES_DB: peopledb
          # required
          POSTGRES_PASSWORD: postgresPasswort
          # optional (defaults to `5432`)
          POSTGRES_PORT: 5432
          # optional (defaults to `postgres`)
          POSTGRES_USER: postgresUser
        ports:
          # maps tcp port 5432 on service container to the host
          - 6432:5432
        # set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      amazingness-service:
        # Docker Hub image
        image: cekocvetkov/amazingness-service:sha-3dffd960ed0f158e80e3279d323221adc1cee1a6
        ports:
          - 8080:8080

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 18.13.0
          
      - name: Cache dependencies
        id: cache
        uses: actions/cache@v2
        with:
          path: ./backend/node_modules
          key: modules-${{ hashFiles('./backend/package-lock.json') }}

      - name: Build Backend
        if: steps.cache.outputs.cache-hit != 'true'
        working-directory: ./backend
        run: |
          npm i
          
#       - name: Cache node_modules
#         id: cache-clt
#         uses: actions/cache@v2
#         with:
#           path: ./frontend/node_modules
#           key: clt-modules-${{ hashFiles('./frontend/package-lock.json') }}
          
      - name: Build Frontend
        if: steps.cache-clt.outputs.cache-hit != 'true'
        working-directory: ./frontend
        run: |
          npm install
          npx cypress cache path

      - name: Run Backend
        working-directory: ./backend
        run: |
          sed -i 's/<PGUSER>/postgresUser/' flyway/flyway.conf
          sed -i 's/<PGPASSWORD>/postgresPasswort/' flyway/flyway.conf
          sed -i 's/<PGDATABASE>/peopledb/' flyway/flyway.conf
          sed -i 's/<PGPORT>/6432/' flyway/flyway.conf
          sed -i 's/<PGHOST>/localhost/' flyway/flyway.conf
          npm run migrate
          npm run start-for-e2e &
          
      - name: Try
        working-directory: ./frontend
        run: |
          wait 10s
          curl localhost:8080
          curl http://localhost:8080
          curl http://localhost:8080/amazing
      
      - name: Run E2E Tests Unmocked
        working-directory: ./frontend
        run: npm run e2e-unmocked
